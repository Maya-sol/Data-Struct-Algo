#include <bits/stdc++.h>

void AddEdge(std::vector<std::vector<int>>& graph, int head, int tail) {
  graph[head].push_back(tail);
  graph[tail].push_back(head);
}

void BFS(std::vector<std::vector<int>>& graph, int source, int vertices_number,
         std::vector<int>& parent, std::vector<int>& distance) {
  std::list<int> queue_of_vertices;
  std::vector<bool> visited(vertices_number, false);
  for (int i = 0; i < vertices_number; i++) {
    distance[i] = std::numeric_limits<int>::max();
    parent[i] = -1;
  }
  visited[source] = true;
  distance[source] = 0;
  queue_of_vertices.push_back(source);
  while (!queue_of_vertices.empty()) {
    int temporary = queue_of_vertices.front();
    queue_of_vertices.pop_front();

    for (size_t i = 0; i < graph[temporary].size(); i++) {
      if (!visited[graph[temporary][i]]) {
        visited[graph[temporary][i]] = true;
        distance[graph[temporary][i]] = distance[temporary] + 1;
        parent[graph[temporary][i]] = temporary;
        queue_of_vertices.push_back(graph[temporary][i]);
      }
    }
  }
}

int CommonShortestDistance(int number_of_vertices,
                           std::vector<int>& leon_distance,
                           std::vector<int>& matelda_distance,
                           std::vector<int>& milk_distance) {
  int answer = std::numeric_limits<int>::max();
  for (int i = 0; i < number_of_vertices; i++) {
    if ((leon_distance[i] + matelda_distance[i] + milk_distance[i]) < answer) {
      answer = leon_distance[i] + matelda_distance[i] + milk_distance[i];
    }
  }
  return answer;
}

int ShortestDistances(std::vector<std::vector<int>>& graph, int leon,
                      int matelda, int milk, int number_of_vertices) {
  std::vector<int> leon_parents(number_of_vertices);
  std::vector<int> leon_distance(number_of_vertices);
  std::vector<int> matelda_parents(number_of_vertices);
  std::vector<int> matelda_distance(number_of_vertices);
  std::vector<int> milk_parents(number_of_vertices);
  std::vector<int> milk_distance(number_of_vertices);
  BFS(graph, leon, number_of_vertices, leon_parents, leon_distance);
  BFS(graph, matelda, number_of_vertices, matelda_parents, matelda_distance);
  BFS(graph, milk, number_of_vertices, milk_parents, milk_distance);
  return CommonShortestDistance(number_of_vertices, leon_distance,
                                matelda_distance, milk_distance);
}

int main() {
  int vertices_number;
  std::cin >> vertices_number;
  std::vector<std::vector<int>> graph(vertices_number);
  int edges_number;
  std::cin >> edges_number;
  int leon, matelda, milk;
  std::cin >> leon >> matelda >> milk;
  for (int i = 0; i < edges_number; i++) {
    int head, tail;
    std::cin >> head >> tail;
    AddEdge(graph, head - 1, tail - 1);
  }
  int answer = ShortestDistances(graph, leon - 1, matelda - 1, milk - 1,
                                 vertices_number);
  std::cout << answer;
  return 0;
}
