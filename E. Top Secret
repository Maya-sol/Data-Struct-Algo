#include <bits/stdc++.h>
#include <iostream>
#include <vector>


bool TopologicalSort(std::vector<std::vector<int>>& adj, std::vector<int>& path,
                     int vertices) {
  std::vector<int> in_degree(vertices, 0);
  for (int i = 0; i < vertices; i++) {
    for (int j = 0; j < adj[i].size(); j++) {
      in_degree[adj[i][j]]++;
    }
  }
  int count = 0;
  std::vector<int> temporary;
  for (int i = 0; i < vertices; i++) {
    if (in_degree[i] == 0) {
      temporary.push_back(i);
    }
  }
  while (!temporary.empty()) {
    int current = temporary.back();
    temporary.pop_back();
    path.push_back(current);
    count++;
    for (int j = 0; j < adj[current].size(); j++) {
      --in_degree[adj[current][j]];
      if (in_degree[adj[current][j]] == 0) {
        temporary.push_back(adj[current][j]);
      }
    }
  }
  if (count != vertices) {
    return 0;
  }
  return 1;
}

int main() {
  int vertices, edges;
  std::cin >> vertices >> edges;
  std::vector<std::vector<int>> adj(vertices);
  std::vector<int> path;
  int head, tail;
  for (int i = 0; i < edges; i++) {
    std::cin >> head >> tail;
    adj[head].push_back(tail);
  }
  if (TopologicalSort(adj, path, vertices)) {
    std::cout << "YES\n";
    for (int i = 0; i < vertices; i++) {
      std::cout << path[i] << " ";
    }
    return 0;
  }
  std::cout << "NO\n";
  return 0;
}
