#include <string.h>

#include <iostream>


template <class T>
class Vector {
 public:
  Vector();
  ~Vector();
  void Push(T);
  void Resize(size_t);
  T Pop();
  T AtLocation(size_t) const;
  size_t Size() const;
  size_t Capacity() const;
  void Clear();

 private:
  T* data_;
  size_t capacity_;
  size_t size_;
};

template <class T>
Vector<T>::Vector() : capacity_(1), size_(0) {
  data_ = new T[capacity_];
}

template <class T>
Vector<T>::~Vector() {
  delete[] data_;
}

template <class T>
void Vector<T>::Push(T value) {
  if (size_ == capacity_) {
    Resize(capacity_ * 2);
  }
  data_[size_] = value;
  size_++;
}

template <class T>
T Vector<T>::Pop() {
  size_--;
  T returned = data_[size_];
  if (size_ == capacity_ / 2 && size_ != 0) {
    Resize(capacity_ / 2);
  }
  return returned;
}

template <class T>
void Vector<T>::Resize(size_t new_capacity) {
  T* new_array = new T[new_capacity];
  for (size_t i = 0; i < size_; i++) {
    new_array[i] = data_[i];
  }
  delete[] data_;
  data_ = new_array;
  capacity_ = new_capacity;
}

template <class T>
T Vector<T>::AtLocation(size_t index) const {
  return data_[index];
}

template <class T>
size_t Vector<T>::Size() const {
  return size_;
}

template <class T>
size_t Vector<T>::Capacity() const {
  return capacity_;
}

template <class T>
void Vector<T>::Clear() {
  delete[] data_;
  size_ = 0;
  capacity_ = 1;
  data_ = new T[capacity_];
}

int main() {
  Vector<int> vector;
  std::string query;
  int number = 0;
  while (std::cin >> query) {
    if (query[0] == 'p') {
      if (query[1] == 'u') {
        std::cin >> number;
        vector.Push(number);
        std::cout << "ok\n";
      } else if ((vector.Size()) != 0) {
        std::cout << vector.Pop() << "\n";
      } else {
        std::cout << "error\n";
      }
    } else if (query[0] == 'a') {
      std::cin >> number;
      if (vector.Size() <= number) {
        std::cout << "error\n";
      } else {
        std::cout << vector.AtLocation(number) << "\n";
      }
    } else if (query[0] == 's') {
      std::cout << vector.Size() << "\n";
    } else if (query[0] == 'r') {
      std::cin >> number;
      vector.Resize(number);
      std::cout << "ok\n";
    } else if (query[0] == 'c' && query[1] == 'a') {
      std::cout << vector.Capacity() << "\n";
    } else if (query[0] == 'c' && query[1] == 'l') {
      vector.Clear();
      std::cout << "ok\n";
    } else if (query[0] == 'e') {
      std::cout << "bye";
      return 0;
    }
  }

  return 0;
}
