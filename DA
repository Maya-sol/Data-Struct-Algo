#include <string.h>

#include <iostream>

template <class T>
class Vector {
 public:
  Vector();
  ~Vector();
  void Push(T value);
  void Resize(size_t new_capacity);
  T Pop();
  T AtLocation(size_t index) const;
  size_t Size() const;
  size_t Capacity() const;
  void Clear();

 private:
  T* data_;
  size_t capacity_;
  size_t size_;
};

template <class T>
Vector<T>::Vector() : capacity_(1), size_(0) {
  data_ = new T[capacity_];
}

template <class T>
Vector<T>::~Vector() {
  delete[] data_;
}

template <class T>
void Vector<T>::Push(T value) {
  if (capacity_ == 0) {
    Resize(1);
  }
  if (size_ == capacity_) {
    Resize(capacity_ * 2);
  }
  data_[size_] = value;
  size_++;
}

template <class T>
T Vector<T>::Pop() {
  if (size_ == 0) {
    throw std::string("error\n");
  }
  size_--;
  T returned = data_[size_];
  if (size_ == capacity_ / 2 && size_ != 0) {
    Resize(capacity_ / 2);
  }
  return returned;
}

template <class T>
void Vector<T>::Resize(size_t new_capacity) {
  T* new_array = new T[new_capacity];
  for (size_t i = 0; i < size_ && i < new_capacity; i++) {
    new_array[i] = data_[i];
  }
  delete[] data_;
  data_ = new_array;
  capacity_ = new_capacity;
  if (size_ > capacity_) {
    size_ = capacity_;
  }
}

template <class T>
T Vector<T>::AtLocation(size_t index) const {
  if (index >= size_) {
    throw std::string("error\n");
  }
  return data_[index];
}

template <class T>
size_t Vector<T>::Size() const {
  return size_;
}

template <class T>
size_t Vector<T>::Capacity() const {
  return capacity_;
}

template <class T>
void Vector<T>::Clear() {
  delete[] data_;
  size_ = 0;
  capacity_ = 1;
  data_ = new T[capacity_];
}

void MessagesAndInput(std::string query, int& num) {
  if (query == "push" || query == "resize" || query == "at") {
    std::cin >> num;
  }
  if (query == "push" || query == "resize" || query == "clear") {
    std::cout << "ok\n";
  }
  if (query == "exit") {
    std::cout << "bye";
  }
}

int main() {
  Vector<int> vector;
  std::string query;
  int number = 0;
  while (std::cin >> query) {
    MessagesAndInput(query, number);
    if (query == "push") {
      vector.Push(number);
    } else if (query == "size") {
      std::cout << vector.Size() << "\n";
    } else if (query == "resize") {
      vector.Resize(number);
    } else if (query == "capacity") {
      std::cout << vector.Capacity() << "\n";
    } else if (query == "clear") {
      vector.Clear();
    } else if (query == "exit") {
      return 0;
    }
    try {
      if (query == "pop") {
        std::cout << vector.Pop() << "\n";
      } else if (query == "at") {
        std::cout << vector.AtLocation(number) << "\n";
      }
    } catch (std::string message) {
      std::cout << message;
    }
  }
}
