#include <bits/stdc++.h>

class Graph {
 private:
  std::vector<std::vector<bool>> adj;

 public:
  Graph(int number);
  void AddEdge(int head, int tail, bool weight);
  std::vector<std::vector<bool>> get();
};

Graph::Graph(int number) : adj(number, std::vector<bool>(number)) {}

void Graph::AddEdge(int head, int tail, bool weight) {
  adj[head][tail] = weight;
}

std::vector<std::vector<bool>> Graph::get() { return adj; }

void FindPaths(std::vector<std::vector<bool>>& adj, int universes) {
  for (int k = 0; k < universes; k++) {
    for (int i = 0; i < universes; i++) {
      for (int j = 0; j < universes; j++) {
        if (adj[i][k] && adj[k][j]) {
          adj[i][j] = 1;
        }
      }
    }
  }
}

int main() {
  int universes;
  std::cin >> universes;
  Graph adj(universes);
  char temporary;
  for (int i = 0; i < universes; i++) {
    for (int j = 0; j < universes; j++) {
      std::cin >> temporary;
      adj.AddEdge(i, j, temporary - '0');
    }
  }
  std::vector<std::vector<bool>> adj1 = adj.get();
  FindPaths(adj1, universes);
  for (int i = 0; i < universes; i++) {
    for (int j = 0; j < universes; j++) {
      std::cout << adj1[i][j];
    }
    std::cout << "\n";
  }
  return 0;
}
