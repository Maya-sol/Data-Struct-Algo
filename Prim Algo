#include <iostream>
#include <math.h>
#include <vector>
#include <limits>
#include <algorithm>
struct node
{
    int x, y;
};
double distance(node &first, node &second)
{
    int d1 = first.x - second.x, d2 = first.y - second.y;
    return sqrt(d1 * d1 + d2 * d2);
}
void Prim(int n, node coordinates[], std::vector<double> &distances,
          std::vector<int> &parents,
          std::vector<bool> &in)
{
    for (int i = 0; i < n; i++)
    {
        int c = -1;
        int min_d = std::numeric_limits<int>::max();
        for (int j = 0; j < n; j++)
        {
            if (distances[j] < min_d && !in[j])
            {
                c = j;
                min_d = distances[j];
            }
        }
        if (c == -1)
        {
            break;
        }
        in[c] = true;
        for (int j = 0; j < n; j++)
        {
            if (!in[j])
            {
                double d = distance(coordinates[c], coordinates[j]);
                if (d < distances[j])
                {
                    distances[j] = d;
                    parents[j] = c;
                }
            }
        }
    }
}

int main()
{
    int n, k;
    std::cin >> n >> k;
    if (k >= n || n == 1)
    {
        std::cout << 0;
    }
    else
    {
        node coordinates[n];
        for (int i = 0; i < n; i++)
        {
            std::cin >> coordinates[i].x >> coordinates[i].y;
        }
        std::vector<double> distances(n, std::numeric_limits<double>::max());
        distances[0] = 0;
        std::vector<int> parents(n, -1);
        std::vector<bool> in(n, false);
        Prim(n, coordinates, distances, parents, in);
        std::vector<double> edges;
        for (int i = 1; i < n; i++)
        {
            edges.push_back(distance(coordinates[i], coordinates[parents[i]]));
        }
        std::sort(edges.begin(), edges.end());
        std::cout << edges[n - k - 1];
    }
    return 0;
};
